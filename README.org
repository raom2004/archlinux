#+startup: showeverything nohideblocks
#+options: creator:nil author:nil toc:t date:t email:nil num:nil title:nil \n:t
#+title: README
#+date: <2022-01-03 Mon>
#+author: Ricardo A. O. Medina
#+email: raom2004@gmail.com
#+language: en
#+creator: Emacs 27.2 (Org mode 9.3.7)

* Arch Linux: automating installation scripts

* Intro

Arch Linux is a minimalist and flexible Linux distribution, which excellent documentation and high-quality packages, allow users to design a highly customized system. A philosophy quite opposite to Linux beginner-friendly distributions, pre-configured with packages that can be unnecessary or designed for user data collection (e.g. Ubuntu and Canonical's commercial nature).

#+HTML:<div align=center>
#+CAPTION: archlinux-Ubuntu/Canonical
#+NAME: Fig. 1
[[./.images/arch-linux-vs-ubuntu.png]]
#+HTML:</div>

Arch Linux encourage users to only install packages that fulfills their unique needs, obtaining a incredibly lightweight and powerful system, easy to manage. But remember, every treasure comes with a price. Arch Linux installation and hardware configuration can be challenging and time consuming to do the first time. But don't panic! Once the documentation have been extensively read and the installation commands has been understood, it becomes quite easy to have a complete Arch Linux system, up and running, in just few minutes! How? 

*You can automatize the Arch Linux installation using scripts, like the described in this repository*. Which tips and recommendations, collected from the official documentation and forums, are useful for: 
 - Everyone who has installed Arch Linux before and wants to speed up the process using scripts, or
 - Someone who has not installed Arch Linux before but definitely wants to have a look over the commands required.
In both cases, this repository is definitely for you!

* Content
#+begin_quote
 - [[Automated installation scripts - example]]
 - [[Advanced aspects]]
   - [[Disk partitioning BIOS/MBR, BIOS/GPT, UEFI/GPT and their encryption]]
   - [[Packages installing with pacstrap and the importance of keyring update]]
   - [[TODO User data encryption]]
   - [[TODO System backup, user documents backup and system update]]
   - [[TODO Security and documents encryption]]
#+end_quote

* Automated installation scripts - example

The most easy example to automatize the Arch Linux install, consist in 3 scripts, each of them for specific tasks.

**** The [[./script1.sh][script1.sh]] performs the critical pre-installation steps, such as:
  #+begin_quote
  - Disk partitioning and formatting with =parted=, as well as mounting
  - Generate a file system table =fstab= 
  - Package installation with =pacstrap=
  #+end_quote

**** The [[./script2.sh][script2.sh]] setup the new Arch Linux system using =chroot=, to configure:
  #+begin_quote
  - Locale and datetime
  - The keyboard keymap
  - The preferred shell, like =bash= or =zsh=
  - the initial ram filesystem =initramfs=
  - User accounts, passwords and permissions, including =sudo=
  - The installation of the boot loader =grub=
  #+end_quote

**** The [[./script2.sh][script3.sh]] runs on *first desktop boot*, to setup:
  #+begin_quote
  - The user configuration files (also known as =dotfiles=)
  - The desktop customizations itself
  #+end_quote

This is an easy approach to install Arch Linux using scripts. A process that can take 5 to 15 minutes, depending in your machine and internet connection. The scripts described are quite useful for *testing* and *debugging* new Arch Linux configurations, dotfiles and desktop customizations, preferably *inside a virtual machine*. 
The next chapter will covers specific topics about Arch Linux install inside real machines.

* Advanced aspects

The installation of Arch Linux in real machines usually address some advanced aspects, like partition the disk according to the firmware available (UEFI, BIOS) and partitioning table (MBR, GPT) supported, encapsulate the new system to install packages and configurate it from inside, make system bootable as well as coexistent operative systems, user data or system encryption, and last but not least, system backup and maintenance. 

**** In this regard, this chapter covers recommendations about:
#+begin_quote
- Disk partitioning BIOS/MBR, BIOS/GPT, UEFI/GPT and their encryption
- Installing packages with pacstrap and the importance of keyring update
- What is Arch-chroot? is not just a chroot
#TODO - User data encryption
#TODO - How to make a backup of the entire system, and make it bootable too
#TODO - Arch Linux maintenance using maint
#+end_quote

** Disk partitioning BIOS/MBR, BIOS/GPT, UEFI/GPT and their encryption

This chapter explain how to create a disk partitioning table using: =parted=, a partitioning program easy to use in a script, and =GRUB=, a highly powerful and flexible boot loader.

The disk partitioning tables described here, BIOS and MBR, are the most easy examples and works quite well. You are free to add other partitions if you want, taking extra care to avoid an Arch Linux installation unable to boot.

The requirement for disk partitioning vary depending on the boot loader used. Here we will use the boot loader =GRUB= because it supports [[https://wiki.archlinux.org/title/Arch_boot_process#Boot_loader][almost everything]], like: different firmwares, partitioning tables, multi-boot, file systems, RAID and LVM encryption, in addition to the documentation and forums available.

*** BIOS/MBR

The BIOS/MBR partitioning table only precise one unique partition, the single root partition =/=.

The example of BIOS/MBR disk partitioning table, is:

#+begin_src bash :results verbatim
## HDD partitioning (BIOS/MBR)
parted -s /dev/sda mklabel msdos
parted -s -a optimal /dev/sda mkpart primary ext4 0% 100%
parted -s /dev/sda set 1 boot on

## HDD formating (-F: overwrite if necessary)
mkfs.ext4 -F /dev/sda1

## HDD mounting
mount /dev/sda1 /mnt 
#+end_src

*** BIOS/GPT

Contrary to BIOS/MBR, a BIOS/GPT disk partitioning table, requires:
#+begin_quote
- A table partitioning =gpt=
- A BIOS boot partition of almost 2MiB (do not require to be mounted)
- The flag =bios_grub=
#+end_quote

The example of BIOS/GPT disk partitioning table, is:

#+begin_src bash :results verbatim
## HDD partitioning (BIOS/GPT)
parted -s /dev/sda mklabel gpt
parted -s -a optimal /dev/sda mkpart primary ext2 0% 2MiB
parted -s /dev/sda set 1 bios_grub on
parted -s -a optimal /dev/sda mkpart primary ext4 2MiB 100%

## HDD formating (-F: overwrite if necessary)
mkfs.ext4 -F /dev/sda2

## HDD mounting
# BIOS/GPT require space for the partition bios_grub
# but such boot partition don't require to be mounted
mount /dev/sda2 /mnt
#+end_src

*** UEFI/GPT

The UEFI/GPT partition table is similar to the previous, with few modifications:
#+begin_quote
- A boot partition of > 300MiB, type =fat32=, required to be mounted
- The flag =esp=
- Install the =efibootmbr= package
#+end_quote

The example of UEFI/GPT disk partitioning table, is:

#+begin_src bash :results verbatim
## HDD partitioning (UEFI/GPT)
parted -s /dev/sda mklabel gpt
parted -s -a optimal /dev/sda mkpart primary 0% 512MiB
parted -s /dev/sda set 1 esp on
parted -s -a optimal /dev/sda mkpart primary 512MiB 100%

## HDD formating (-F: overwrite if necessary)
mkfs.fat -F32 /dev/sda1
mkfs.ext4 -F /dev/sda2

## HDD mounting
mount /dev/sda2 /mnt
mkdir -p /mnt/boot/efi
mount /dev/sda1 /mnt/boot/efi
#+end_src

#+begin_src bash :results verbatim
## install package required for GRUB to boot in UEFI mode
if [[ ${boot_mode} == "UEFI" ]]; then
    pacstrap /mnt efibootmgr	 
fi
#+end_src

*** Disk partitioning, all together

What happen when we want to support all the options mentioned? 

In such case, Arch Linux can detect if it has booted from =BIOS= or =UEFI=, which can be quite useful to make a conditional like this:

#+begin_src bash :results verbatim
# BIOS and UEFI support
if ! ls /sys/firmware/efi/efivars >& /dev/null; then
    boot_mode="BIOS"
else
    boot_mode="UEFI"
fi


if [[ ${boot_mode} == "BIOS" ]]; then
    printf "BIOS detected! you can select a GPT or MBR partition table:\n"
    select OPTION in MBR GPT; do
	case ${OPTION} in
	    MBR)
		## HDD partitioning (BIOS/MBR)
		parted -s /dev/sda mklabel msdos
		parted -s -a optimal /dev/sda mkpart primary ext4 0% 100%
		parted -s /dev/sda set 1 boot on
		
		## HDD formating (-F: overwrite if necessary)
		mkfs.ext4 -F /dev/sda1

		## HDD mounting
		mount /dev/sda1 /mnt
		break
		;;
	    GPT)
		## HDD partitioning (BIOS/GPT)
		parted -s /dev/sda mklabel gpt
		parted -s -a optimal /dev/sda mkpart primary ext2 0% 2MiB
		parted -s /dev/sda set 1 bios_grub on
		parted -s -a optimal /dev/sda mkpart primary ext4 2MiB 100%
		
		## HDD formating (-F: overwrite if necessary)
		mkfs.ext4 -F /dev/sda2
		
		## HDD mounting
		mount /dev/sda2 /mnt
		break
		;;
	esac
    done
fi


if [[ ${boot_mode} == "UEFI" ]]; then
    ## HDD partitioning (UEFI/GPT)
    parted -s /dev/sda mklabel gpt
    parted -s -a optimal /dev/sda mkpart primary 0% 512MiB
    parted -s /dev/sda set 1 esp on
    parted -s -a optimal /dev/sda mkpart primary 512MiB 100%

    ## HDD formating (-F: overwrite if necessary)
    mkfs.fat -F32 /dev/sda1
    mkfs.ext4 -F /dev/sda2

    ## HDD mounting
    mount /dev/sda2 /mnt
    mkdir -p /mnt/boot/efi
    mount /dev/sda1 /mnt/boot/efi
fi

## package required for GRUB to boot in UEFI mode
if [[ ${boot_mode} == "UEFI" ]]; then
    pacstrap /mnt efibootmgr	 
fi
#+end_src

*** Encrypted partitioning with LUKS and LVM

After explain some examples of the most standard disk partitioning schemes, it is important to mentioned that disk partitioning can be completely encrypted. An specific item very well described [[https://www.rohlix.eu/post/linux-disk-encryption-with-bios-uefi-using-mbr-gpt-luks-lvm-and-grub/][here]].

** Installing packages with pacstrap and the importance of keyring update

The first pacstrap that I wrote, looked like this:

#+begin_src bash :results verbatim
## install system packages (with support for wifi and ethernet)
pacstrap /mnt base base-devel linux \
	 zsh sudo vim git wget \
	 dhcpcd \
	 networkmanager \
	 grub os-prober \
	 xorg-server lightdm lightdm-gtk-greeter \
	 gnome-terminal terminator cinnamon livecd-sounds \
	 firefox \
	 virtualbox-guest-utils
#+end_src

This code has two important problems:
#+begin_quote
- No comments about the purpose of each package. 
- An outdated Linux installation image can prompt an error about gpg keyring. 
#+end_quote
For the previously mentioned, I started to use a different approach, like this:

#+begin_src bash :results verbatim
## Update package manager to avoid gpg keyring errors during install
pacman -Syy --noconfirm archlinux-keyring

## Install Arch Linux Packages:
# system essentials
pacstrap /mnt base base-devel linux
# code editors
pacstrap /mnt vim nano
# system shell	
pacstrap /mnt zsh
# system shell additional functions
pacstrap /mnt pkgfile
# system tools	
pacstrap /mnt sudo git wget
# support for file system mounting
pacstrap /mnt gvfs
# system backup	
pacstrap /mnt rsync
# network package
pacstrap /mnt dhcpcd
# wifi package
pacstrap /mnt networkmanager
# boot loader	
pacstrap /mnt grub
# boot loader support for additional operative systems
pacstrap /mnt os-prober
# boot loader support to boot in UEFI mode (required for GRUB)
if [[ "${boot_mode}" == "UEFI" ]]; then
    pacstrap /mnt efibootmgr
fi
#+end_src

In the example above the repeated use of pacstrap can be overwhelming, but it definitely looks more readable and maintainable too. Indeed, it is easy to note that an essential package is missing for Arch Linux installation in any real machine:

#+begin_src bash :results verbatim
pacstrap /mnt linux-firmware
#+end_src


** What is Arch-chroot? well, it is not just a chroot
=chroot= is a lightweight environment that provides functionality equivalent to a virtual machine. In few words: chroot is a captive system. For example, when you run an interactive shell with chroot, this encapsulated environment prevent it to interact with your regular system ([[https://www.howtogeek.com/441534/how-to-use-the-chroot-command-on-linux/][source]]). 

=arch-chroot= is a shell script that prepares a new "root directory" with the necessary system mounts (/proc, /sys, /dev, etc.) and files (/etc/resolv.conf), then does an unshare'd chroot into it. You'll therefore be left with a chroot environment that's detached from both the main filesystem and process tree ([[https://www.quora.com/How-is-arch-chroot-different-from-chroot?share=1][source]]). You can check the system mounts inside arch-chroot by running =findmnt=.

Indeed, =arch-chroot= together with =pacstrap= and =genfstab= are part of the =arch-install-scripts=, aimed to automate what the authors call "menial tasks" ([[https://github.com/archlinux/arch-install-scripts][source]]), simplifying the commands required to install Arch Linux compared to more advance Linux installations (Linux From Scratch).

This way, when we run =arch-chroot= we are indeed running =unshare= and =chroot= together, as we can see in the last line of the script:

#+begin_src bash :results output :wrap example bash
cat /bin/arch-chroot | tail -n1
#+end_src

#+RESULTS:
#+begin_example bash
SHELL=/bin/bash unshare --fork --pid chroot "${chroot_args[@]}" -- "$chrootdir" "$@"
#+end_example

TODO
https://unix.stackexchange.com/questions/482894/why-do-i-get-permission-denied-when-using-unshare
https://man.archlinux.org/man/core/util-linux/unshare.1.en#EXAMPLES
https://stackoverflow.com/questions/64254531/how-unshare-makes-possible-to-use-chroot-without-real-root
https://www.cloudsavvyit.com/731/what-is-chroot-on-linux-and-how-do-you-use-it/

So, to clarify what this line even does, we can see a simple example of the use of unshare:

#+begin_example bash
unshare --fork --pid --mount-proc readlink /proc/self
#+end_example
# ** User data encryption
# ** How to make a backup of the entire system, and make it bootable too
# ** Arch Linux maintenance using maint

