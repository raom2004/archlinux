#!/bin/bash
#
# ~/.prompt
#
# Dependencies: None


### FUNCTION DECLARATION

# function prompt_command {
#   # Check if we are inside a git repository
#   if git status > /dev/null 2>&1; then
#     # Only get the name of the branch
#     export GIT_STATUS="($(git status | grep 'On branch' | cut -b 11-)) "
#   else
#     export GIT_STATUS=""
#   fi
# }

### CODE

# This function gets called every time PS1 is shown
# PROMPT_COMMAND=prompt_command

## Set bash PS1 prompt

if [[ "$(echo $0)" == "bash" ]];then
  # simple version
  #PS1="\$GIT_STATUS \u@\h:\w\$ "
  # colored version 
  PS1="${NCyan}\u${NC}@\h: \w ${NCyan}\$GIT_STATUS${NC}\\$ "

  ## add "git prompt" to PS1 prompt

  # source: https://github.com/magicmonty/bash-git-prompt
  if [[ ! -f "$HOME/.bash-git-prompt/gitprompt.sh" ]]; then
    git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1
  fi

  if [[ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]]; then
    GIT_PROMPT_ONLY_IN_REPO=1
    #GIT_PROMPT_SHOW_UPSTREAM=1

    #GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
    #GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
    #GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments

    #GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
    #GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files

    #GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files

    #GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10

    GIT_PROMPT_START="${Cyan}\u${ResetColor}@\h " # uncomment for custom prompt start sequence
    GIT_PROMPT_END="\n$ " # uncomment for custom prompt end sequence

    GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)
    #GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh
    #GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme
    source $HOME/.bash-git-prompt/gitprompt.sh #as last entry source the gitprompt script
  fi
fi # end bash PS1 prompt

## Set zsh PS1 prompt

if [[ "$(echo $0)" == "zsh" ]];then
  #------------------------------
  # Prompt
  #------------------------------
  autoload -U colors zsh/terminfo
  colors

  # experimental:
  # source: https://salferrarello.com/zsh-git-status-prompt/
  # Autoload zsh add-zsh-hook and vcs_info functions (-U autoload w/o substition, -z use zsh style)
  autoload -Uz add-zsh-hook vcs_info
  # Enable substitution in the prompt.
  setopt prompt_subst
  # Run vcs_info just before a prompt is displayed (precmd)
  add-zsh-hook precmd vcs_info
  # add ${vcs_info_msg_0} to the prompt
  # e.g. here we add the Git information in red  
  PROMPT='%F{cyan}%n%f@%M: %~%F{cyan}${vcs_info_msg_0_}%f %# '

  # Enable checking for (un)staged changes, enabling use of %u and %c
  zstyle ':vcs_info:*' check-for-changes true
  # Set custom strings for an unstaged vcs repo changes (*) and staged changes (+)
  zstyle ':vcs_info:*' unstagedstr ' *'
  zstyle ':vcs_info:*' stagedstr ' +'
  # Set the format of the Git information for vcs_info
  zstyle ':vcs_info:git:*' formats       ' (%b%u%c)'
  zstyle ':vcs_info:git:*' actionformats ' (%b|%a%u%c)'
  # end
fi # end zsh PS1 prompt


# emacs:
# Local Variables:
# sh-basic-offset: 2
# End:

# vim: set ts=2 sw=2 et:
