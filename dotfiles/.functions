#!/bin/bash
#
# ~/.functions
#
# Requirements: None

### FUNTIONS DECLARATION

## ERROR HANDLING FUNCTIONS | Usage: $ die
out() { printf "$1 $2\n" "${@:3}"; }
error() { out "==> ERROR:" "$@"; } >&2
die() { error "$@"; exit 1; }
# MESSAGE FUNCTIONS
warning() { out "==> WARNING:" "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}

## GENERATE A FILE LOG IF COMMAND FAILS
# Dependencies: positional arguments = $@
# Usage: $ try <<command>>
try ()
{
    set -o xtrace
    "$@"
    status=$?
    if [[ "${status}" -eq 1 ]]; then
      (echo "ERROR in command: $@") 2>&1 | tee -a "$0".log
      die "please verify errors reported in ls $(${0}.log)"
    elif [[ "${status}" -eq 0 ]]; then
	echo "..$@ ..command succeded"
    fi
    set +o xtrace
}

## redirect the stdout (1) stderror (2) of a command to /dev/null
# Usage: $ nullify program arg1 arg2
amiroot ()
{
  ROOT_UID=0   # Root has $UID 0.
  if (( "$UID" = "$ROOT_UID" )); then
    echo "You are root."
  else
    echo "Root priviledges required. Cancelling"
    exit 0
  fi
}

## REDIRECT: the stdout (1) stderror (2) of a command to /dev/null
# Usage: nullify program arg1 arg2
nullify ()
{
  "$@" >/dev/null 2>&1
  # you can also use:
  # "$@" >& /dev/null
}

## connect to wifi using iwctl
iwctl_connect_wifi ()
{
  ## Function to connect wifi using iwctl
  until wget -q --spider http://google.com; do
    echo "Internet not available"
    unset answer
    read -p "Configure a new wifi connection?[y/N]" answer 
    if [[ "${answer:-N}" =~ ^([yY])$ ]]; then
      unset answer
      while [[ "${repeat:-N}" =~ ^([yY])$ ]]; do
        read -e -i "iwctl --passphrase <passphrase> station device connect <SSID>" new_wlan
	(eval "${new_wlan}" && sleep 10) \
	  && repeat='N' \
	    || read -p "Command failed!... Try again?[y/N]" repeat
      done
    else
      sleep 5
    fi
  done
  echo "Internet connection detected."
}

## check internet connection and exit if offline
check_internet ()
{ 
  # if internet offline, please exit
  if ! wget -q --spider http://google.com; then
    printf " ABORTING %s: NO \n" "${0}"
    sleep 3
    exit 0
  else
    printf "%s\n" "Internet Connection Detected"
  fi
} 

# DOWNLOAD AUR PACKAGES: in /tmp and install them
# Usage: aur <package name or url>
aur_install ()
{
  folder="$(basename "$1" .git)"
  if -n "$(pacman -Qm "${folder}")"; then
    echo "==> Package previously installed in system"
    read -p "Reinstall it? [y/N]" answer
    [[ "${answer:-N}" =~ ^([nN]) ]] && echo "Quit" | exit 0
  fi
  echo "Installing AUR package ${folder}"
  git clone "$1" /tmp/"${folder}"
  cd /tmp/"${folder}"
  makepkg -Ccsri --noconfirm --needed
  cd $OLDPWD
}

aur ()
{
  printf "==> Processing.. "
  if [[ "$1" == *"https://"* ]]; then
    printf "%s" "$1"
    aur_install "$1"
  else
    printf "https://aur.archlinux.org/%s.git" "$1"
    aur_install "https://aur.archlinux.org/${1}.git"
  fi
}

## FINDS DIRECTORY SIZES & LISTS THEM FOR THE CURRENT DIRECTORY
dirsize ()
{
  du -shx * .[a-zA-Z0-9_]* 2> /dev/null \
    | egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
  egrep '^ *[0-9.]*M' /tmp/list
  egrep '^ *[0-9.]*G' /tmp/list
  rm -rf /tmp/list
}

## EXTRACT COMPRESSED FILES
extract ()
{
  if [[ -f "$1" ]]; then
    case "$1" in
      *.tar.bz2)   tar xvjf "$1"    ;;
      *.tar.gz)    tar xvzf "$1"    ;;
      *.bz2)       bunzip2 "$1"     ;;
      *.rar)       unrar x "$1"     ;;
      *.gz)        gunzip "$1"      ;;
      *.tar)       tar xvf "$1"     ;;
      *.tbz2)      tar xvjf "$1"    ;;
      *.tgz)       tar xvzf "$1"    ;;
      *.zip)       unzip "$1"       ;;
      *.Z)         uncompress "$1"  ;;
      *.7z)        7z x "$1"        ;;
      *)           echo "don't know how to extract '$1'..." ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

## No more cd ../../../.. but up 4
up ()
{
  local d=""
  limit="$1"
  for ((i=1 ; i <= limit ; i++)); do
    d="${d}"/..
  done
  d=$(echo "${d}" | sed 's/^\\///')
  [[ -z "${d}" ]] && d=..
  cd "${d}"
}


## INSTALL PLUGINS "WITHOUT OPEN" VIM
my_vim_install ()
{
  if [[ ! -d "~/.vim/plugged/jummidark.vim" ]]; then
    sleep 3
    vim -E -s -u $HOME/.vimrc +PlugInstall +visual +qall
  fi
}


## GIT CONFIG
my_git_config ()
{
  if [[ ! -f "$HOME/.gitconfig" ]]; then
    cd "$HOME"
    if mount | grep -q shared; then
      bash "$HOME/shared/.gitrc" \
        || echo "ERROR: can not run script $_"
    elif mount | grep -q _EXT; then
      # automatic configuration
      bash "$(mount | awk '/_EXT/ {printf $3}')/.gitrc" \
        || echo "ERROR: can not run script $_"
    else
      # semiautomatic configuration
      printf "==> Set git GLOBAL configuration\n"
      read -p "--> Set git user name [$USER]: " git_username
      git config --global user.name "${git_username:-$USER}" \
	|| echo "ERROR: can not set git config user.name $_"
      usermail="raom2004@gmail.com"
      read -p "--> Set git user MAIL [$usermail]: " git_usermail
      git config --global user.mail "${git_usermail:-$usermail}" \
	   || echo "ERROR: can not set git config user.mail $_"
      read -p "--> Set git editor vim or emacs [vim]: " git_editor
      git config --global core.editor "${git_editor:-vim}" \
	|| echo "ERROR: can not set git config core.editor $_"
      read -p "--> Set git credential.helper [cache]: " git_cred
      git config --global credential.helper "${git_cred:-cache}" \
	   || echo "ERROR: can not set git config credential.helper $_"
    fi
    cd "$OLDPWD"
  fi
}

## REPEAT LAST COMMAND WITH SUDO
repeat ()
{
  if (( $# == 0 )); then
    sudo $(history -p '!!')
  else
    sudo "$@"
  fi
}

## BACKUP FILE
make_backup ()
{
  cp "$1" \
     ~/.backup/"$(basename \"${1}\")"-"$(date +%Y%m%d%H%M)".backup
}

## GIT REPO ALIAS
mygit ()
{
  if [[ -z $1 ]]; then
    echo "mygit require the name of the repository"
  else
    git clone "https://github.com/raom2004/$1"
  fi
}

## AUTOMATIZE ARCHLINUX UPDATE
update_archlinux ()
{
  printf "\n==> Updating archlinux keyring\n"
  try sudo pacman -Syy --noconfirm archlinux-keyring 
  printf "\n==> Updating archlinux pacman packages\n"
  try sudo pacman -Syu 
  printf "\n==> Updating archlinux AUR virtualbox extention\n"
  try aur 'https://aur.archlinux.org/virtualbox-ext-oracle.git'
  ## UPDATE XMONAD
  if grep 'Apple' /sys/devices/virtual/dmi/id/board_vendor; then
    printf "\n==> Recompiling xmonad\n"
    try xmonad --recompile
  fi
}

# emacs:
# Local Variables:
# sh-basic-offset: 2
# End:

# vim: set ts=2 sw=2 et:
