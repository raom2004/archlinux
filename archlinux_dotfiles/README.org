* dotfiles
User-specific application configuration files whose filename starts
with a dot. 

I found two different methods to maintain a control version of the dotfiles:

** A bare repository

This Git repo is intended to track dotfiles directly. Initially I consider to use the method "bare repository and alias method" described in
https://wiki.archlinux.org/title/Dotfiles.

command required

#+begin_src bash :results verbatim
git init --bare $HOME/.dotfiles
alias config='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
config config status.showUntrackedFiles no
#+end_src


** A bootstrap script

The idea is to have the git repository in a folder and use a script to synchronize each file. The advantage is that running the script the files will be updated, and the git command do not need any alias as the previous method. 

script required

#+begin_src bash :results verbatim :tangle ./bootstrap.sh
# Set the actual working directory
cd "$(dirname "${BASH_SOURCE}")"

# update changes in repository
git pull origin main

# perform synchonization of dotfiles
# from this working directory to $HOME directory
function doIt
{
	rsync --exclude ".git/" \
		--exclude "bootstrap.sh" \
		--exclude "README.org" \
		--exclude "LICENSE" \
		-avh --no-perms . ~
	source ~/.bashrc
}

if [ "${1}" == "--force" -o "${1}" == "-f" ]; then
	doIt
else
	read -p "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1
	echo ""
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		doIt
	fi
fi
unset doIt
#+end_src
